
R version 4.0.2 (2020-06-22) -- "Taking Off Again"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(tidyverse)
── Attaching packages ─────────────────────────────────────── tidyverse 1.3.0 ──
✔ ggplot2 3.3.2     ✔ purrr   0.3.4
✔ tibble  3.0.4     ✔ dplyr   1.0.2
✔ tidyr   1.1.2     ✔ stringr 1.4.0
✔ readr   1.3.1     ✔ forcats 0.5.0
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
> library(tidymodels)
── Attaching packages ────────────────────────────────────── tidymodels 0.1.2 ──
✔ broom     0.7.2      ✔ recipes   0.1.15
✔ dials     0.0.9      ✔ rsample   0.0.8 
✔ infer     0.5.3      ✔ tune      0.1.2 
✔ modeldata 0.1.0      ✔ workflows 0.2.1 
✔ parsnip   0.1.4      ✔ yardstick 0.0.7 
── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──
✖ scales::discard() masks purrr::discard()
✖ dplyr::filter()   masks stats::filter()
✖ recipes::fixed()  masks stringr::fixed()
✖ dplyr::lag()      masks stats::lag()
✖ yardstick::spec() masks readr::spec()
✖ recipes::step()   masks stats::step()
> library(xgboost)

Attaching package: ‘xgboost’

The following object is masked from ‘package:dplyr’:

    slice

> # 
> ## local
> # git <- "~/Documents/GitHub/EDLD-654-Final"
> # 
> # data <- import(path(git, "data/train.csv")) %>%
> #   select(-classification) %>%
> #   mutate_if(is.character, factor) %>%
> #   mutate(ncessch = as.double(ncessch))
> # 
> # bonus <- import(path(git, "data/bonus_data_v2.csv")) %>%
> #   mutate(ncessch = as.double(ncessch)) %>% 
> #   mutate(locale = gsub("^.{0,3}", "", locale)) %>%
> #   separate(col = locale, into = c("locale", "sublocale"), sep = ": ")
> 
> # 
> # disc <- read.csv("data/bonus source files/disc_drop.csv")
> ## talapas
> data <- read.csv("data/train.csv") %>%
+   select(-classification) %>%
+   mutate_if(is.character, factor) %>%
+   mutate(ncessch = as.numeric(ncessch))
> 
> 
> bonus <- read.csv("data/bonus_data_v2.csv") %>%
+   mutate(ncessch = as.numeric(ncessch)) %>%
+   mutate(locale = gsub("^.{0,3}", "", locale)) %>%
+   separate(col = locale, into = c("locale", "sublocale"), sep = ": ")
> 
> disc <- read_csv("data/disc_drop.csv") %>%
+   mutate(attnd_dist_inst_id = as.double(attnd_dist_inst_id))
Parsed with column specification:
cols(
  attnd_dist_inst_id = col_double(),
  out_susp = col_double(),
  dropout_rate = col_double()
)
> 
> ## join data
> data <- data %>% 
+   left_join(bonus) %>% 
+   left_join(disc)
Joining, by = c("enrl_grd", "ncessch")
Joining, by = "attnd_dist_inst_id"
> 
> set.seed(3000)
> 
> data_split <- initial_split(data) 
> 
> train <- training(data_split)
> test <- testing(data_split)
> 
> 
> ## basic recipe
> rec <- recipe(score ~ ., train) %>%
+   step_mutate(tst_dt = as.numeric(lubridate::mdy_hms(tst_dt)),
+               lang_cd = case_when(lang_cd == "S" ~ "S", TRUE ~ "E"),
+               pupil_tch_ratio = as.numeric(pupil_tch_ratio),
+               pupil_tch_ratio = as.numeric(pupil_tch_ratio),
+               pupil_tch_rate = case_when(pupil_tch_ratio < 18 ~ 1,
+                                          pupil_tch_ratio < 25 ~ 2,
+                                          pupil_tch_ratio < 30 ~ 3, 
+                                          TRUE ~ 4),
+               pupil_tch_rate = as.factor(pupil_tch_rate)) %>% 
+   step_rm(contains("id"), ncessch, ncesag, lea_name, sch_name) %>%
+   step_mutate(hpi = as.numeric(hpi),
+               lat = round(lat, 2),
+               lon = round(lon, 2),
+               median_income = log(median_income),
+               median_rent = log(median_rent),
+               frl_prop = fr_lnch_prop + red_lnch_prop,
+               schl_perf = case_when(sch_percent_level_1 + sch_percent_level_2 > sch_percent_level_3 + sch_percent_level_4 ~ 1,
+                                     TRUE ~ 0),
+               over_100 = under_200 + over_200) %>% 
+   step_interact(terms = ~ lat:lon) %>% 
+   step_rm(fr_lnch_prop, red_lnch_prop) %>% 
+   step_string2factor(all_nominal()) %>% 
+   step_zv(all_predictors()) %>%
+   step_unknown(all_nominal()) %>% 
+   step_medianimpute(all_numeric()) %>%
+   step_dummy(all_nominal(), one_hot = TRUE) %>% 
+   step_interact(~ exp_current_supp_serve_total.x:sp_ed_fg_Y) %>% 
+   step_interact(~ lang_cd_S:p_hispanic_latino) %>% 
+   step_nzv(all_predictors(), freq_cut = 995/5)
> 
> 
> # bake recipe
> baked_train <- prep(rec) %>% 
+   bake(train)
> # 
> # baked_test <- prep(rec) %>%
> #   bake(test)
> 
> train_x = data.matrix(baked_train[, -73])
> train_y = data.matrix(baked_train[, 73])
> 
> pull_eval <- function(m) {
+   m[["evaluation_log"]] %>% 
+     pivot_longer(-iter,
+                  names_to = c("set", NA, "stat"),
+                  names_sep = "_",
+                  values_to = "val") %>% 
+     pivot_wider(names_from = "stat", 
+                 values_from = "val") 
+ }
> # Take start time to measure time of random search algorithm
> start.time <- Sys.time()
> 
> reg_alpha <- c(1e-5, 1e-2, 0.1, 1, 100) # using the suggestion in book
> reg_lambda <- c(1, 1.5, 2, 3, 4.5) # using the suggestion in book
> grid <- expand_grid(reg_alpha, reg_lambda)
> 
> sample_mods <- map2(grid$reg_alpha, grid$reg_lambda, ~{
+   xgb.cv(
+     data = train_x,
+     label = train_y,
+     nrounds = 5000,
+     objective = "reg:squarederror",
+     early_stopping_rounds = 50, 
+     nfold = 10,
+     verbose = 1,
+     params = list( 
+       eta = 0.1,
+       max_depth = 6,
+       min_child_weight = 10,
+       subsample = 0.9850567,
+       colsample_bytree = 0.6432432,
+       alpha = .x,
+       lambda = .y,
+       nthread = 24
+     ) 
+   )  
+ }) 
[1]	train-rmse:2251.555395+0.103991	test-rmse:2251.561987+0.976270 
Multiple eval metrics are present. Will use test_rmse for early stopping.
Will train until test_rmse hasn't improved in 50 rounds.

[2]	train-rmse:2026.822888+0.092041	test-rmse:2026.838416+0.971248 
[3]	train-rmse:1824.600183+0.091506	test-rmse:1824.613501+0.944376 
[4]	train-rmse:1642.634705+0.082384	test-rmse:1642.649707+0.922432 
[5]	train-rmse:1478.911072+0.071731	test-rmse:1478.919690+0.905531 
[6]	train-rmse:1331.606836+0.061740	test-rmse:1331.621033+0.877646 
[7]	train-rmse:1199.090112+0.056612	test-rmse:1199.109814+0.853458 
[8]	train-rmse:1079.887317+0.053465	test-rmse:1079.901672+0.842950 
[9]	train-rmse:972.671417+0.047531	test-rmse:972.690008+0.837531 
[10]	train-rmse:876.250562+0.044288	test-rmse:876.269342+0.827150 
[11]	train-rmse:789.557098+0.038749	test-rmse:789.576282+0.821573 
[12]	train-rmse:711.628485+0.034946	test-rmse:711.646271+0.811113 
[13]	train-rmse:641.593628+0.030762	test-rmse:641.608392+0.805886 
[14]	train-rmse:578.675891+0.025030	test-rmse:578.696851+0.802046 
[15]	train-rmse:522.173822+0.020614	test-rmse:522.197546+0.791891 
[16]	train-rmse:471.460919+0.018866	test-rmse:471.489142+0.772896 
[17]	train-rmse:425.971607+0.017858	test-rmse:426.008920+0.758459 
